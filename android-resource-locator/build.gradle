plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm'
    id 'kotlin-kapt'
    id 'idea'
}

version = '1.0.0'

sourceSets {
    functionalTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    functionalTestImplementation.extendsFrom implementation
    functionalTestRuntimeOnly.extendsFrom runtimeOnly
}

idea {
    module {
        testSourceDirs += sourceSets.functionalTest.java.srcDirs
        testResourceDirs += sourceSets.functionalTest.resources.srcDirs
        scopes.TEST.plus += [configurations.functionalTestCompileClasspath]
    }
}

task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

dependencies {
    api gradleApi()
    api project(":android-resource-api")
    api project(":android-resource-collector")
    implementation project(':android-resource-serializer')
    implementation project(':android-plugin-tools')
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "com.google.code.gson:gson:$gson_version"
    compileOnly "com.google.dagger:dagger:$dagger_version"
    compileOnly "com.google.auto.factory:auto-factory:$autoFactory_version"
    compileOnly "com.android.tools.build:gradle:$androidBuild_version"
    kapt "com.google.auto.factory:auto-factory:$autoFactory_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    testImplementation project(':test-utils')
    functionalTestImplementation project(':functional-test-utils')
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
kapt {
    correctErrorTypes = true
}